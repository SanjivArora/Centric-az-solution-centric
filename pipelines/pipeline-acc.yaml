name: acc-centric-terraform

trigger:
  branches:
    include:
    - main
    - feature/*
    - release/*
    - fix/*
    - feat/*
  paths:
     include:
     - 'terraform/acc'
pool:
  vmImage: ubuntu-latest

stages:
  - stage: plan
    displayName: "Plan and Generate Artifact"
    variables:
      - group: ARM
    jobs:
      - job: plan 
        displayName: Plan
        steps:
          - task: ms-acclabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV2@2
            displayName: 'Terraform Init'
            inputs:
              provider: 'azurerm'
              workingDirectory: 'terraform/acc'
              command: init
              backendServiceArm: 'ado-nr-centric-acc'
              backendAzureRmResourceGroupName: '$(ARM.ResourceGroup.acc.Name)'
              backendAzureRmStorageAccountName: '$(ARM.StorageAccount.acc.Name)'
              backendAzureRmContainerName: '$(ARM.StorageAccount.acc.Container.Name)'
              backendAzureRmKey: 'acccentricsoltfsae1'
          - task: ms-acclabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV2@2
            displayName: 'Terraform Validate'
            inputs:
              provider: 'azurerm'
              workingDirectory: 'terraform/acc'
              command: validate
              backendServiceArm: 'ado-WDHB-Project-Centric-acc'
              backendAzureRmResourceGroupName: '$(ARM.ResourceGroup.acc.Name)'
              backendAzureRmStorageAccountName: '$(ARM.StorageAccount.acc.Name)'
              backendAzureRmContainerName: '$(ARM.StorageAccount.acc.Container.Name)'
              backendAzureRmKey: 'acccentricsoltfsae1'
          - task: TerraformTaskV2@2
            displayName: Terraform Plan
            inputs:
              provider: 'azurerm'
              command: 'plan'
              commandOptions: '-out $(Build.BuildId).tfplan'
              workingDirectory: 'terraform/acc'
              environmentServiceNameAzureRM: 'ado-WDHB-Project-Centric-acc'
          - task: ArchiveFiles@2
            displayName: 'Archive Terraform Plan Files'
            inputs:
              rootFolderOrFile: 'terraform/acc'
              includeRootFolder: false
              archiveType: 'tar'
              tarCompression: 'gz'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-tfplan.tgz'
              replaceExistingArchive: true     
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Terraform Plan Artifact'
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)'
              artifactName: '$(Build.BuildId)-tfplan'
              artifactType: pipeline
          - script: |
              cd $(System.DefaultWorkingDirectory)/'terraform/acc'
              ls -l
              terraform show -json $(System.DefaultWorkingDirectory)/'terraform/acc'/$(Build.BuildId).tfplan > tf.json
            displayName: 'Terraform Show'
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Terraform Show Artifact'
            inputs:
              targetPath: 'terraform/acc/tf.json'
              artifactName: 'tfshow'
              artifactType: pipeline
  - stage: compliance
    dependsOn: plan
    displayName: 'Static Code Analysis Stage'
    jobs:
      - job: ScanningCodes
        displayName: 'Run Checkov'
        steps:
        - task: DownloadPipelineArtifact@2
          displayName: 'Download JSON Artifact'
          inputs:
            source: current 
            artifactName: 'tfshow'
            downloadPath: $(System.DefaultWorkingDirectory)/'terraform/acc'
        - script: |
                  mkdir CheckovReport
                  docker pull bridgecrew/checkov
                  docker run --volume $(System.DefaultWorkingDirectory)/'terraform/acc':/tf --workdir /tf bridgecrew/checkov --download-external-modules true --skip-check CKV_AZURE_39 --framework terraform_plan --file /tf/tf.json --output junitxml > $(System.DefaultWorkingDirectory)/CheckovReport/Checkov-Report.xml
          displayName: 'Do Checkov Static Code Analysis'
        - task: PublishTestResults@2
          displayName: Publish Checkov Test Results
          condition: succeededOrFailed()
          inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/Checkov-Report.xml'
              searchFolder: '$(System.DefaultWorkingDirectory)/CheckovReport'
              mergeTestResults: false
              testRunTitle: Checkov Scan
              failTaskOnFailedTests: false
              publishRunAttachments: true
  - stage: approval
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    dependsOn: 
      - plan
      - compliance
    displayName: Validation
    jobs:
    - job: waitForValidation
      displayName: Wait for external validation
      pool: server
      timeoutInMinutes: 4320 # job times out in 3 days
      steps:
      - task: ManualValidation@0
        timeoutInMinutes: 1440 # task times out in 1 day
        inputs:
          notifyUsers: |
            sharan.nagulapalli@healthalliance.co.nz
          instructions: 'Please validate the terraform plan and resume'
          onTimeout: 'resume'
  - stage: deploy
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    dependsOn: 
      - plan
      - compliance
      - approval
    displayName: Deploy
    variables:
      - group: ARM
    jobs:  
    - job: apply
      displayName: Deploy Terraform plan
      steps:
      - task: DownloadPipelineArtifact@2
        displayName: 'Download JSON Artifact'
        inputs:
          source: current 
          artifactName: '$(Build.BuildId)-tfplan'
          downloadPath: $(System.DefaultWorkingDirectory)/Artifact
      - task: ExtractFiles@1
        inputs:
          archiveFilePatterns: 'Artifact/*.tgz' 
          destinationFolder:  'terraform/acc'
          overwriteExistingFiles: true
      - task: ms-acclabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV2@2
        displayName: 'Terraform Init'
        inputs:
          provider: 'azurerm'
          workingDirectory: 'terraform/acc'
          command: 'init' 
          backendServiceArm: 'ado-WDHB-Project-Centric-acc'
          backendAzureRmResourceGroupName: '$(ARM.ResourceGroup.acc.Name)'
          backendAzureRmStorageAccountName: '$(ARM.StorageAccount.acc.Name)'
          backendAzureRmContainerName: '$(ARM.StorageAccount.acc.Container.Name)'
          backendAzureRmKey: 'acccentricsoltfsae1'
      - task: TerraformTaskV2@2
        displayName: 'Terraform Apply'
        inputs:
          provider: 'azurerm'
          command: 'apply'
          workingDirectory: 'terraform/acc'
          environmentServiceNameAzureRM: 'ado-WDHB-Project-Centric-acc'
